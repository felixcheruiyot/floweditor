// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResultRouterForm should render 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="split_by_run_result"
  tabs={
    Array [
      Object {
        "body": <div
          className="shouldDelimit"
        >
          <CheckboxElement
            checked={false}
            description="Evaluate your rules against a delimited part of your result"
            name="Delimit"
            onChange={[Function]}
            title="Delimit Result"
          />
        </div>,
        "checked": false,
        "name": "Advanced",
      },
    ]
  }
  title="Split by Flow Result"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "split_by_run_result_delimited",
        ],
        "description": "Split by a result in the flow",
        "form": undefined,
        "localization": [Function],
        "localizeableKeys": Array [
          "exits",
          "cases",
        ],
        "name": "Split by Flow Result",
        "type": "split_by_run_result",
      }
    }
    onChange={[MockFunction]}
  />
  <div
    className="leadIn"
  >
    If the flow result
  </div>
  <div
    className="resultSelect"
  >
    <AssetSelector
      assets={
        Object {
          "items": Object {},
          "type": "result",
        }
      }
      entry={
        Object {
          "value": null,
        }
      }
      name="Flow Result"
      onChange={[Function]}
      placeholder="Select Result"
      searchable={false}
      styles={
        Object {
          "control": [Function],
          "indicatorsContainer": [Function],
          "input": [Function],
          "menuList": [Function],
          "option": [Function],
          "singleValue": [Function],
          "valueContainer": [Function],
        }
      }
    />
  </div>
  <CaseList
    cases={Array []}
    data-spec="cases"
    onCasesUpdated={[Function]}
  />
  <OptionalTextInput
    helpText="By naming the result, you can reference it later using @run.results.whatever_the_name_is"
    name="Result Name"
    onChange={[Function]}
    toggleText="Save as.."
    value={
      Object {
        "value": "",
      }
    }
  />
</Dialog>
`;
